// This file is auto-generated by @hey-api/openapi-ts

export type Id = string;

/**
 * A globally unique UUID.
 */
export type Uuid = string;

/**
 * Unix timestamp in milliseconds since epoch.
 */
export type Timestamp = number;

export type Identifiable = {
  id: Id;
};

export type CreationTimestamp = {
  createdAt: Timestamp;
};

export type Timestamps = CreationTimestamp & {
  updatedAt: Timestamp;
};

export type CreatedAtInput = {
  createdAt?: Timestamp;
};

export type UpdatedAtInput = {
  updatedAt?: Timestamp;
};

export type Tags = {
  [key: string]: string;
};

export type Tagged = {
  tags?: Tags;
};

export type OptionalMissionData = {
  groupIds?: Array<string>;
  externalId?: string;
  internalId?: string;
  shared?: boolean;
  source?: string;
  message?: string;
  keyword?: string;
  /**
   * An arbitrary scale of priorities.
   */
  priority?: number;
  /**
   * Should this mission be editable by clients?
   */
  editable?: boolean;
  /**
   * Is the use of blue lights and siren permitted?
   */
  privileges?: boolean;
  address?: string;
  object?: string;
  objectInfo?: string;
  planNo?: string;
  reporter?: string;
  info?: string;
  /**
   * The name of the incident commander.
   */
  commander?: string;
  /**
   * The name of the person recording the incident proceedings.
   */
  recorder?: string;
  /**
   * The main radio channel for the mission.
   */
  channel?: string;
  coordinates?: Coordinates;
  /**
   * Number of milliseconds after the last update to this mission when this mission will become a candidate for automatic closing.
   * The actual close of the mission may happen several minutes up to an hour after this time, but will never happen before it.
   * Pass `0` or a negative value to disable automatic closing of this mission.
   *
   */
  expiresAfter?: number;
};

export type RequiredMissionData = {
  message: string;
};

export type MissionData = OptionalMissionData & RequiredMissionData & Tagged;

export type MissionResources = {
  actions: Array<Action>;
  reports: Array<Report>;
  resources: Array<Resource>;
  mapElements: Array<MapElement>;
  sections: Array<Section>;
  files: Array<File>;
  patients: Array<Patient>;
  attendances: Array<Attendance>;
};

/**
 * @deprecated
 */
export type MissionAggregates = {
  personnel?: Personnel;
};

export type MissionBase = Timestamps &
  MissionData & {
    id: Uuid;
  };

export type Mission = MissionBase & MissionResources & MissionAggregates;

export type MissionsList = {
  items: Array<MissionBase>;
};

export type CreateMissionInput = MissionData &
  CreatedAtInput & {
    /**
     * The IDs of the groups for which this mission should be visible. If none are passed, the mission is created for all groups the client has `create` permission for.
     *
     */
    groupIds?: Array<string>;
    actions?: Array<CreateActionInput>;
    reports?: Array<CreateReportInput>;
    resources?: Array<AddResourceInput>;
    mapElements?: Array<MapElementData>;
    sections?: Array<SectionData>;
  };

export type PostMissionInput = CreateMissionInput & {
  externalId: string;
};

export type UpdateMissionInput = OptionalMissionData & UpdatedAtInput;

export type ActionData = {
  text: string;
} & SectionsRef &
  Tagged;

export type Action = Identifiable & CreationTimestamp & ActionData;

export type CreateActionInput = ActionData &
  CreatedAtInput & {
    id?: Id;
  };

export type ReportData = {
  text: string;
  reporter: string;
  publication?: ReportPublication;
} & SectionsRef &
  WithAttachments;

export type ReportPublication = {
  publish: boolean;
  signal?: boolean;
  status?: ReportPublicationStatus;
};

export type ReportPublicationStatus =
  | ({
      status?: "pending";
    } & ReportPublicationStatusPending)
  | ({
      status?: "success";
    } & ReportPublicationStatusSuccess)
  | ({
      status?: "failed";
    } & ReportPublicationStatusFailed);

export type ReportPublicationStatusPending = {
  status: "pending";
};

export type ReportPublicationStatusSuccess = {
  status: "success";
  publicationTimestamp: number;
};

export type ReportPublicationStatusFailed = {
  status: "failed";
  error: string;
};

export type Report = Identifiable & CreationTimestamp & ReportData;

export type CreateReportInput = ReportData &
  CreatedAtInput & {
    id?: Id;
  };

export type WithAttachments = {
  attachments?: Array<Id>;
};

export type File = Identifiable & FileData;

export type FileData = {
  type: string;
  size: number;
};

export type FileUploadRequest = {
  type: string;
  size: number;
};

export type FileUploadResponse = {
  url: string;
};

export type Personnel = {
  counts?: Array<PersonnelCount>;
  totalCount: number;
};

export type PersonnelCount = {
  type: string;
  count: number;
};

export type ResourceData = {
  name: string;
  identifier: string;
  status: string;
  personnel?: string;
  personnelCounts?: Personnel;
  location?: Coordinates;
} & SectionsRef &
  Tagged;

export type ResourceTimestamps = {
  dataUpdatedAt?: Timestamp;
  statusUpdatedAt?: Timestamp;
  locationUpdatedAt?: Timestamp;
};

export type Resource = Identifiable &
  Timestamps &
  ResourceData &
  ResourceTimestamps & {
    removed?: boolean;
  };

export type AddResourceInput = ResourceData &
  CreatedAtInput &
  ResourceTimestamps & {
    id?: Id;
  };

export type UpdateResourceInput = {
  name?: string;
  identifier?: string;
  status?: string;
  personnel?: string;
  location?: Coordinates;
} & UpdatedAtInput;

export type RemoveResourceInput = {
  updatedAt?: Timestamp;
};

export type _Error = {
  /**
   * The (mostly) human-readable error message.
   */
  message: string;
};

export type Coordinates = {
  latitude: number;
  longitude: number;
};

export type MissionMapElementList = {
  items: Array<MapElement>;
};

export type MapElement = Identifiable & Timestamps & MapElementData;

export type MapElementData = MapElementBaseData &
  Tagged &
  (
    | MarkerMapElementData
    | PolygonMapElementData
    | PolylineMapElementData
    | CircleMapElementData
  );

export type IconMapSymbol = {
  type: "icon";
  icon: string;
};

export type TaktischesZeichenMapSymbol = {
  type: "tz";
  grundzeichen?: string;
  fachaufgabe?: string;
  einheit?: string;
  verwaltungsstufe?: string;
  funktion?: string;
  symbol?: string;
  organisation?: string;
  text?: string;
  name?: string;
  organisationName?: string;
  farbe?: string;
};

export type MapSymbol =
  | ({
      type?: "icon";
    } & IconMapSymbol)
  | ({
      type?: "tz";
    } & TaktischesZeichenMapSymbol);

export type MapElementBaseData = {
  symbol?: MapSymbol;
  label?: string;
  color?: Color;
};

export type MarkerMapElementData = {
  type: "marker";
  coordinates: Coordinates;
};

export type PolygonMapElementData = {
  type: "polygon";
  points: Array<Coordinates>;
};

export type PolylineMapElementData = {
  type: "polyline";
  points: Array<Coordinates>;
};

export type CircleMapElementData = {
  type: "circle";
  center: Coordinates;
  radius: number;
};

export type Color = string;

export type SectionData = {
  label: string;
  commander?: string;
  channel?: string;
  patientCapacity?: Array<PatientCapacity>;
  unregisteredPatientCounts?: Array<PatientCounts>;
} & Tagged;

export type PatientCapacity = {
  triageCategory: PatientTriageCategory;
  capacity: number;
};

export type PatientCounts = {
  triageCategory: PatientTriageCategory;
  count: number;
};

/**
 * @deprecated
 */
export type SectionAggregates = {
  personnel?: Personnel;
};

export type Section = Identifiable &
  Timestamps &
  SectionData &
  SectionAggregates;

export type SectionsRef = {
  sections?: Array<Id>;
};

export type Event = {
  timestamp: Timestamp;
};

export type MissionCreatedEvent = Event & {
  type: "mission-created";
  value: MissionData & MissionAggregates;
};

export type MissionUpdatedEvent = Event &
  PropertyChanges & {
    type: "mission-updated";
    oldValue: MissionData & MissionAggregates;
    newValue: MissionData & MissionAggregates;
  };

export type MissionClosedEvent = Event & {
  type: "mission-closed";
  closedAt: number;
  groupIds?: Array<string>;
};

export type ActionCreatedEvent = Event & {
  type: "action-created";
  actionId: string;
  value: ActionData;
};

export type ActionUpdatedEvent = Event &
  PropertyChanges & {
    type: "action-updated";
    actionId: string;
    oldValue: ActionData;
    newValue: ActionData;
  };

export type ActionDeletedEvent = Event & {
  type: "action-deleted";
  actionId: string;
  value: ActionData;
};

export type ReportCreatedEvent = Event & {
  type: "report-created";
  reportId: string;
  value: ReportData;
  attachmentCount?: number;
};

export type ReportUpdatedEvent = Event &
  PropertyChanges & {
    type: "report-updated";
    reportId: string;
    oldValue: ReportData;
    newValue: ReportData;
  };

export type ReportDeletedEvent = Event & {
  type: "report-deleted";
  reportId: string;
  value: ReportData;
};

export type ResourceAddedEvent = Event & {
  type: "resource-added";
  resourceId: string;
  value: ResourceData;
};

export type PropertyChanges = {
  changes: Array<PropertyChange>;
};

export type PropertyChange = {
  property: string;
  oldValue?: unknown;
  newValue?: unknown;
};

export type ResourceUpdatedEvent = Event &
  PropertyChanges & {
    type: "resource-updated";
    resourceId: string;
    oldValue: ResourceData;
    newValue: ResourceData;
  };

export type ResourceRemovedEvent = Event & {
  type: "resource-removed";
  resourceId: string;
  value: ResourceData;
};

export type SectionCreatedEvent = Event & {
  type: "section-created";
  sectionId: string;
  value: SectionData & SectionAggregates;
};

export type SectionUpdatedEvent = Event &
  PropertyChanges & {
    type: "section-updated";
    sectionId: string;
    oldValue: SectionData & SectionAggregates;
    newValue: SectionData & SectionAggregates;
  };

export type SectionDeletedEvent = Event & {
  type: "section-deleted";
  sectionId: string;
  value: SectionData;
};

export type PatientCreatedEvent = Event & {
  type: "patient-created";
  patientId: string;
  value: PatientData;
  reporter?: string;
};

export type PatientUpdatedEvent = Event &
  PropertyChanges & {
    type: "patient-updated";
    patientId: string;
    oldValue: PatientData;
    newValue: PatientData;
    reporter?: string;
  };

export type PatientDeletedEvent = Event & {
  type: "patient-deleted";
  patientId: string;
  value: PatientData;
};

export type AttendanceCreatedEvent = Event & {
  type: "attendance-created";
  attendanceId: string;
  value: AttendanceData;
};

export type AttendanceUpdatedEvent = Event &
  PropertyChanges & {
    type: "attendance-updated";
    attendanceId: string;
    oldValue: AttendanceData;
    newValue: AttendanceData;
  };

export type AttendanceDeletedEvent = Event & {
  type: "attendance-deleted";
  attendanceId?: string;
  value: AttendanceData;
};

export type FileCreatedEvent = Event & {
  type: "file-created";
  fileId: string;
  value: FileData;
};

export type MissionEvent =
  | ({
      type?: "mission-created";
    } & MissionCreatedEvent)
  | ({
      type?: "mission-updated";
    } & MissionUpdatedEvent)
  | ({
      type?: "mission-closed";
    } & MissionClosedEvent)
  | ({
      type?: "action-created";
    } & ActionCreatedEvent)
  | ({
      type?: "action-updated";
    } & ActionUpdatedEvent)
  | ({
      type?: "action-deleted";
    } & ActionDeletedEvent)
  | ({
      type?: "report-created";
    } & ReportCreatedEvent)
  | ({
      type?: "report-updated";
    } & ReportUpdatedEvent)
  | ({
      type?: "report-deleted";
    } & ReportDeletedEvent)
  | ({
      type?: "resource-added";
    } & ResourceAddedEvent)
  | ({
      type?: "resource-updated";
    } & ResourceUpdatedEvent)
  | ({
      type?: "resource-removed";
    } & ResourceRemovedEvent)
  | ({
      type?: "section-created";
    } & SectionCreatedEvent)
  | ({
      type?: "section-updated";
    } & SectionUpdatedEvent)
  | ({
      type?: "section-deleted";
    } & SectionDeletedEvent)
  | ({
      type?: "patient-created";
    } & PatientCreatedEvent)
  | ({
      type?: "patient-updated";
    } & PatientUpdatedEvent)
  | ({
      type?: "patient-deleted";
    } & PatientDeletedEvent)
  | ({
      type?: "attendance-created";
    } & AttendanceCreatedEvent)
  | ({
      type?: "attendance-updated";
    } & AttendanceUpdatedEvent)
  | ({
      type?: "attendance-deleted";
    } & AttendanceDeletedEvent)
  | ({
      type?: "file-created";
    } & FileCreatedEvent);

export type MissionReport = Identifiable &
  MissionData &
  CreationTimestamp & {
    groupIds: Array<string>;
    externalId?: string;
    internalId?: string;
    keyword?: string;
    message: string;
    privileges?: boolean;
    address?: string;
    object?: string;
    objectInfo?: string;
    closedAt: Timestamp;
  };

export type FirebaseConfig = {
  config: {
    [key: string]: string;
  };
  token: string;
};

export type UserData = {
  email?: string;
  displayName?: string;
  /**
   * @deprecated
   */
  roles: Array<string>;
  permissions: Array<string>;
  groupPermissions: Array<string>;
  defaultMissionGroups: Array<string>;
};

export type UserInfo = {
  id: string;
  email?: string;
  displayName?: string;
  roles: Array<string>;
  permissions: Array<string>;
  defaultMissionGroups: Array<string>;
  groups: Array<UserMissionGroup>;
};

export type UserMissionGroup = {
  groupId: string;
  name?: string;
  permissions: Array<string>;
  defaultGroup: boolean;
};

export type GroupPermission = {
  groupId: string;
  permission: string;
};

export type User = Identifiable & UserData & Timestamps;

export type CreateUserInput = {
  email?: string;
  displayName?: string;
  /**
   * @deprecated
   */
  roles?: Array<string>;
  permissions?: Array<string>;
  groupPermissions?: Array<string>;
  defaultMissionGroups?: Array<string>;
};

export type CreateUserResult = User;

export type UsersList = {
  users: Array<User>;
};

export type ApiKeyData = {
  name?: string;
};

export type ApiKey = Identifiable & CreationTimestamp & ApiKeyData;

export type ApiKeyList = {
  items: Array<ApiKey>;
};

export type CreateApiKeyInput = {
  name?: string;
};

export type MissionReportSearchResults = {
  search?: string;
  limit: number;
  items: Array<MissionReport>;
};

export type Patient = Identifiable & Timestamps & PatientData;

export type PatientData = {
  identifier?: string;
  externalId?: string;
  name?: string;
  injuries?: string;
  triageCategory?: PatientTriageCategory;
  gender?: PatientGender;
  dateOfBirthOrAge?: string;
  address?: string;
  healthInsuranceCompany?: string;
  healthInsuranceNumber?: string;
  location?: string;
  medicalActions?: PatientMedicinalActions;
  burnDegree?: PatientBurnDegree;
  contamination?: PatientContamination;
  transportAid?: PatientTransportAid;
  transportTarget?: string;
  transportMeans?: string;
  transportResourceId?: string;
  transportResourceName?: string;
  status?: PatientStatus;
  condition?: PatientCondition;
  situation?: string;
  actions?: string;
  notes?: string;
  patientAssignmentCode?: string;
  treatmentRefused?: boolean;
  resourceIds?: Array<string>;
  coordinates?: Coordinates;
} & SectionsRef &
  Tagged;

export type PatientUpdate = PatientData & {
  reporter?: string;
};

export type PatientTriageCategory =
  | "immediate"
  | "delayed"
  | "minimal"
  | "expectant"
  | "deceased"
  | "affected";

export type PatientGender = "female" | "male" | "other";

export type PatientStatus = "active" | "inactive";

export type PatientCondition =
  | "triage"
  | "in-treatment"
  | "ready-for-transport"
  | "transported"
  | "discharged"
  | "completed";

export type PatientMedicinalActions = {
  intubated?: boolean;
  ventilated?: boolean;
  monitored?: boolean;
  resuscitated?: boolean;
};

export type PatientBurnDegree = "I" | "IIa" | "IIb" | "III";

export type PatientContamination = {
  chemical?: boolean;
  biological?: boolean;
  radioactive?: boolean;
};

export type PatientTransportAid = {
  stretcher?: boolean;
  walker?: boolean;
  wheelchair?: boolean;
  buggy?: boolean;
  ventilator?: boolean;
};

export type MissionGroupData = {
  name?: string;
};

export type MissionGroup = Identifiable & MissionGroupData;

export type MissionGroupList = {
  items?: Array<MissionGroup>;
};

export type Translations = unknown;

export type FileUrl = {
  url: string;
};

export type MissionReportResponse = MissionEvents | FileUrl;

export type MissionEvents = Identifiable & {
  events: Array<MissionEvent>;
};

export type AddMissionToGroupInput =
  | {
      missionId: Uuid;
    }
  | {
      externalId: string;
    };

export type Attendance = Identifiable & Timestamps & AttendanceData;

export type AttendanceData = {
  name: string;
  function?: string;
  status?: string;
  contact?: string;
  resourceId?: string;
  resourceName?: string;
  startedAt: number;
  finishedAt?: number;
};

export type AttendanceUpdate = {
  name?: string;
  function?: string;
  status?: string;
  contact?: string;
  resourceId?: string;
  resourceName?: string;
  startedAt?: number;
  finishedAt?: number;
};

export type PostMissionData = {
  body: PostMissionInput;
  path?: never;
  query?: never;
  url: "/missions";
};

export type PostMissionErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * An mission with this ID already exists or is not active anymore.
   *
   */
  409: _Error;
};

export type PostMissionError = PostMissionErrors[keyof PostMissionErrors];

export type PostMissionResponses = {
  /**
   * The mission was successfully created or updated.
   *
   */
  200: Mission;
};

export type PostMissionResponse =
  PostMissionResponses[keyof PostMissionResponses];

export type EndMissionData = {
  body?: never;
  path: {
    /**
     * The ID of the mission.
     */
    missionId: Uuid;
  };
  query?: never;
  url: "/missions/{missionId}";
};

export type EndMissionErrors = {
  /**
   * There is no active mission with the given ID. Possibly the mission was already ended.
   *
   */
  404: _Error;
};

export type EndMissionError = EndMissionErrors[keyof EndMissionErrors];

export type EndMissionResponses = {
  /**
   * The mission was successfully ended.
   */
  204: void;
};

export type EndMissionResponse = EndMissionResponses[keyof EndMissionResponses];

export type GetMissionData = {
  body?: never;
  path: {
    /**
     * The ID of the mission.
     */
    missionId: Uuid;
  };
  query?: never;
  url: "/missions/{missionId}";
};

export type GetMissionErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type GetMissionError = GetMissionErrors[keyof GetMissionErrors];

export type GetMissionResponses = {
  /**
   * The mission data.
   */
  200: Mission;
};

export type GetMissionResponse = GetMissionResponses[keyof GetMissionResponses];

export type UpdateMissionData = {
  body: UpdateMissionInput;
  path: {
    /**
     * The ID of the mission.
     */
    missionId: Uuid;
  };
  query?: never;
  url: "/missions/{missionId}";
};

export type UpdateMissionErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type UpdateMissionError = UpdateMissionErrors[keyof UpdateMissionErrors];

export type UpdateMissionResponses = {
  /**
   * The mission was successfully updated.
   *
   */
  200: Mission;
};

export type UpdateMissionResponse =
  UpdateMissionResponses[keyof UpdateMissionResponses];

export type CreateMissionData = {
  body: CreateMissionInput;
  path: {
    /**
     * The ID of the mission.
     */
    missionId: Uuid;
  };
  query?: never;
  url: "/missions/{missionId}";
};

export type CreateMissionErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * An mission with this ID already exists or is not active anymore.
   *
   */
  409: _Error;
};

export type CreateMissionError = CreateMissionErrors[keyof CreateMissionErrors];

export type CreateMissionResponses = {
  /**
   * The mission was successfully created or updated.
   *
   */
  200: Mission;
};

export type CreateMissionResponse =
  CreateMissionResponses[keyof CreateMissionResponses];

export type CreateMissionActionData = {
  body: CreateActionInput;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the action to create
     */
    actionId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/actions/{actionId}";
};

export type CreateMissionActionErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
  /**
   * The mission already contains an action with the given ID but different values.
   * Note that actions are immutable.
   *
   */
  409: _Error;
};

export type CreateMissionActionError =
  CreateMissionActionErrors[keyof CreateMissionActionErrors];

export type CreateMissionActionResponses = {
  /**
   * The action was successfully created.
   */
  200: Mission;
};

export type CreateMissionActionResponse =
  CreateMissionActionResponses[keyof CreateMissionActionResponses];

export type CreateMissionReportData = {
  body: CreateReportInput;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the report to create.
     */
    reportId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/reports/{reportId}";
};

export type CreateMissionReportErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
  /**
   * The mission already contains an report with the given ID but different values.
   * Note that reports are immutable.
   *
   */
  409: _Error;
};

export type CreateMissionReportError =
  CreateMissionReportErrors[keyof CreateMissionReportErrors];

export type CreateMissionReportResponses = {
  /**
   * The report was successfully created.
   */
  200: Mission;
};

export type CreateMissionReportResponse =
  CreateMissionReportResponses[keyof CreateMissionReportResponses];

export type SetMissionReportPublicationStatusData = {
  body: ReportPublicationStatus;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the report.
     */
    reportId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/reports/{reportId}/publication/status";
};

export type SetMissionReportPublicationStatusErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type SetMissionReportPublicationStatusError =
  SetMissionReportPublicationStatusErrors[keyof SetMissionReportPublicationStatusErrors];

export type SetMissionReportPublicationStatusResponses = {
  /**
   * The report was successfully updated.
   */
  200: Report;
};

export type SetMissionReportPublicationStatusResponse =
  SetMissionReportPublicationStatusResponses[keyof SetMissionReportPublicationStatusResponses];

export type GetFileData = {
  body?: never;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the file to create.
     */
    fileId: Id;
  };
  query?: {
    noRedirect?: boolean;
  };
  url: "/missions/{missionId}/files/{fileId}";
};

export type GetFileErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type GetFileError = GetFileErrors[keyof GetFileErrors];

export type GetFileResponses = {
  /**
   * The URL to the file.
   */
  200: FileUrl;
};

export type GetFileResponse = GetFileResponses[keyof GetFileResponses];

export type RequestFileUploadData = {
  body: FileUploadRequest;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the file to create.
     */
    fileId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/files/{fileId}";
};

export type RequestFileUploadErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type RequestFileUploadError =
  RequestFileUploadErrors[keyof RequestFileUploadErrors];

export type RequestFileUploadResponses = {
  /**
   * The file was successfully registered. Use the returned URL to upload the file using a PUT request.
   */
  200: FileUploadResponse;
};

export type RequestFileUploadResponse =
  RequestFileUploadResponses[keyof RequestFileUploadResponses];

export type RemoveMissionResourceData = {
  body?: never;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the resource to remove
     */
    resourceId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/resources/{resourceId}";
};

export type RemoveMissionResourceErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type RemoveMissionResourceError =
  RemoveMissionResourceErrors[keyof RemoveMissionResourceErrors];

export type RemoveMissionResourceResponses = {
  /**
   * The resource was successfully remove from the mission.
   */
  200: Mission;
};

export type RemoveMissionResourceResponse =
  RemoveMissionResourceResponses[keyof RemoveMissionResourceResponses];

export type UpdateMissionResourceData = {
  body: UpdateResourceInput;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the resource.
     */
    resourceId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/resources/{resourceId}";
};

export type UpdateMissionResourceErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type UpdateMissionResourceError =
  UpdateMissionResourceErrors[keyof UpdateMissionResourceErrors];

export type UpdateMissionResourceResponses = {
  /**
   * The resource was successfully updated.
   */
  200: Mission;
};

export type UpdateMissionResourceResponse =
  UpdateMissionResourceResponses[keyof UpdateMissionResourceResponses];

export type CreateMissionResourceData = {
  body: AddResourceInput;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the resource to add.
     */
    resourceId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/resources/{resourceId}";
};

export type CreateMissionResourceErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
  /**
   * The mission already contains a resource with the given ID but different values.
   *
   */
  409: _Error;
};

export type CreateMissionResourceError =
  CreateMissionResourceErrors[keyof CreateMissionResourceErrors];

export type CreateMissionResourceResponses = {
  /**
   * The resource was successfully added to the mission.
   */
  200: Mission;
};

export type CreateMissionResourceResponse =
  CreateMissionResourceResponses[keyof CreateMissionResourceResponses];

export type RemoveMissionMapElementData = {
  body?: never;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the new map element
     */
    elementId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/map-elements/{elementId}";
};

export type RemoveMissionMapElementErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type RemoveMissionMapElementError =
  RemoveMissionMapElementErrors[keyof RemoveMissionMapElementErrors];

export type RemoveMissionMapElementResponses = {
  /**
   * The map element was successfully deleted from the mission.
   */
  200: Mission;
};

export type RemoveMissionMapElementResponse =
  RemoveMissionMapElementResponses[keyof RemoveMissionMapElementResponses];

export type CreateMissionMapElementData = {
  body: MapElementData;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the new map element
     */
    elementId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/map-elements/{elementId}";
};

export type CreateMissionMapElementErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type CreateMissionMapElementError =
  CreateMissionMapElementErrors[keyof CreateMissionMapElementErrors];

export type CreateMissionMapElementResponses = {
  /**
   * The map element was successfully added to the mission.
   */
  200: Mission;
};

export type CreateMissionMapElementResponse =
  CreateMissionMapElementResponses[keyof CreateMissionMapElementResponses];

export type RemoveMissionSectionData = {
  body?: never;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the section
     */
    sectionId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/sections/{sectionId}";
};

export type RemoveMissionSectionErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type RemoveMissionSectionError =
  RemoveMissionSectionErrors[keyof RemoveMissionSectionErrors];

export type RemoveMissionSectionResponses = {
  /**
   * The section was successfully removed from the mission.
   */
  200: Mission;
};

export type RemoveMissionSectionResponse =
  RemoveMissionSectionResponses[keyof RemoveMissionSectionResponses];

export type UpdateMissionSectionData = {
  body: SectionData;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the section
     */
    sectionId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/sections/{sectionId}";
};

export type UpdateMissionSectionErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type UpdateMissionSectionError =
  UpdateMissionSectionErrors[keyof UpdateMissionSectionErrors];

export type UpdateMissionSectionResponses = {
  /**
   * The section was successfully updated.
   */
  200: Mission;
};

export type UpdateMissionSectionResponse =
  UpdateMissionSectionResponses[keyof UpdateMissionSectionResponses];

export type CreateMissionSectionData = {
  body: SectionData;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the new section
     */
    sectionId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/sections/{sectionId}";
};

export type CreateMissionSectionErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type CreateMissionSectionError =
  CreateMissionSectionErrors[keyof CreateMissionSectionErrors];

export type CreateMissionSectionResponses = {
  /**
   * The section was successfully added to the mission.
   */
  200: Mission;
};

export type CreateMissionSectionResponse =
  CreateMissionSectionResponses[keyof CreateMissionSectionResponses];

export type RemoveMissionPatientData = {
  body?: never;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the patient
     */
    patientId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/patients/{patientId}";
};

export type RemoveMissionPatientErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type RemoveMissionPatientError =
  RemoveMissionPatientErrors[keyof RemoveMissionPatientErrors];

export type RemoveMissionPatientResponses = {
  /**
   * The patient was successfully removed from the mission.
   */
  200: Mission;
};

export type RemoveMissionPatientResponse =
  RemoveMissionPatientResponses[keyof RemoveMissionPatientResponses];

export type UpdateMissionPatientData = {
  body: PatientUpdate;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the patient
     */
    patientId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/patients/{patientId}";
};

export type UpdateMissionPatientErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type UpdateMissionPatientError =
  UpdateMissionPatientErrors[keyof UpdateMissionPatientErrors];

export type UpdateMissionPatientResponses = {
  /**
   * The patient was successfully updated.
   */
  200: Mission;
};

export type UpdateMissionPatientResponse =
  UpdateMissionPatientResponses[keyof UpdateMissionPatientResponses];

export type CreateMissionPatientData = {
  body: PatientUpdate;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the patient
     */
    patientId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/patients/{patientId}";
};

export type CreateMissionPatientErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type CreateMissionPatientError =
  CreateMissionPatientErrors[keyof CreateMissionPatientErrors];

export type CreateMissionPatientResponses = {
  /**
   * The patient was successfully added to the mission.
   */
  200: Mission;
};

export type CreateMissionPatientResponse =
  CreateMissionPatientResponses[keyof CreateMissionPatientResponses];

export type RemoveMissionAttendanceData = {
  body?: never;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the attendance
     */
    attendanceId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/attendances/{attendanceId}";
};

export type RemoveMissionAttendanceErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type RemoveMissionAttendanceError =
  RemoveMissionAttendanceErrors[keyof RemoveMissionAttendanceErrors];

export type RemoveMissionAttendanceResponses = {
  /**
   * The attendance was successfully removed from the mission.
   */
  200: Mission;
};

export type RemoveMissionAttendanceResponse =
  RemoveMissionAttendanceResponses[keyof RemoveMissionAttendanceResponses];

export type UpdateMissionAttendanceData = {
  body: AttendanceUpdate;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the attendance
     */
    attendanceId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/attendances/{attendanceId}";
};

export type UpdateMissionAttendanceErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type UpdateMissionAttendanceError =
  UpdateMissionAttendanceErrors[keyof UpdateMissionAttendanceErrors];

export type UpdateMissionAttendanceResponses = {
  /**
   * The attendance was successfully updated.
   */
  200: Mission;
};

export type UpdateMissionAttendanceResponse =
  UpdateMissionAttendanceResponses[keyof UpdateMissionAttendanceResponses];

export type CreateMissionAttendanceData = {
  body: AttendanceData;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the attendance
     */
    attendanceId: Id;
  };
  query?: never;
  url: "/missions/{missionId}/attendances/{attendanceId}";
};

export type CreateMissionAttendanceErrors = {
  /**
   * The input data is invalid.
   */
  400: _Error;
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type CreateMissionAttendanceError =
  CreateMissionAttendanceErrors[keyof CreateMissionAttendanceErrors];

export type CreateMissionAttendanceResponses = {
  /**
   * The attendance was successfully added to the mission.
   */
  200: Mission;
};

export type CreateMissionAttendanceResponse =
  CreateMissionAttendanceResponses[keyof CreateMissionAttendanceResponses];

export type PostMissionResourceData = {
  body: UpdateResourceInput;
  path?: never;
  query?: {
    /**
     * If set to `true`, the resource will be created in all missions of this API key where the resource does not exist yet. If set to `false`, the resource will only be updated if present in each mission.
     */
    create?: boolean;
  };
  url: "/resources";
};

export type PostMissionResourceErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
};

export type PostMissionResourceError =
  PostMissionResourceErrors[keyof PostMissionResourceErrors];

export type PostMissionResourceResponses = {
  /**
   * The resource was successfully created or updated
   */
  204: void;
};

export type PostMissionResourceResponse =
  PostMissionResourceResponses[keyof PostMissionResourceResponses];

export type GetMissionGroupsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/groups";
};

export type GetMissionGroupsResponses = {
  /**
   * Successful response
   */
  200: MissionGroupList;
};

export type GetMissionGroupsResponse =
  GetMissionGroupsResponses[keyof GetMissionGroupsResponses];

export type SetMissionGroupData = {
  body: MissionGroupData;
  path: {
    /**
     * The ID of the mission group
     */
    groupId: string;
  };
  query?: never;
  url: "/groups/{groupId}";
};

export type SetMissionGroupResponses = {
  /**
   * Successful response
   */
  200: MissionGroup;
};

export type SetMissionGroupResponse =
  SetMissionGroupResponses[keyof SetMissionGroupResponses];

export type GetGroupMissionsData = {
  body?: never;
  path: {
    /**
     * The ID of the mission group
     */
    groupId: string;
  };
  query?: {
    /**
     * Comma-separated list of sub-resources to include in the result.
     */
    expand?: string;
  };
  url: "/groups/{groupId}/missions";
};

export type GetGroupMissionsResponses = {
  /**
   * Successful response
   */
  200: MissionsList;
};

export type GetGroupMissionsResponse =
  GetGroupMissionsResponses[keyof GetGroupMissionsResponses];

export type AddMissionToGroupData = {
  body: AddMissionToGroupInput;
  path: {
    /**
     * The ID of the mission group.
     */
    groupId: Id;
  };
  query?: never;
  url: "/groups/{groupId}/missions";
};

export type AddMissionToGroupResponses = {
  /**
   * No Content.
   */
  204: void;
};

export type AddMissionToGroupResponse =
  AddMissionToGroupResponses[keyof AddMissionToGroupResponses];

export type SearchReportsData = {
  body?: never;
  path?: never;
  query?: {
    search?: string;
    limit?: number;
  };
  url: "/reports";
};

export type SearchReportsErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
};

export type SearchReportsError = SearchReportsErrors[keyof SearchReportsErrors];

export type SearchReportsResponses = {
  /**
   * The mission report search results.
   */
  200: MissionReportSearchResults;
};

export type SearchReportsResponse =
  SearchReportsResponses[keyof SearchReportsResponses];

export type GetReportData = {
  body?: never;
  headers?: {
    accept?: string;
  };
  path: {
    /**
     * The ID of the mission.
     */
    missionId: string;
  };
  query?: {
    response?: "redirect" | "url" | "data";
  };
  url: "/reports/{missionId}";
};

export type GetReportErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type GetReportError = GetReportErrors[keyof GetReportErrors];

export type GetReportResponses = {
  /**
   * The mission report.
   */
  200: MissionReportResponse;
};

export type GetReportResponse = GetReportResponses[keyof GetReportResponses];

export type ReopenMissionData = {
  body?: never;
  path: {
    /**
     * The ID of the mission.
     */
    missionId: string;
  };
  query?: never;
  url: "/reports/{missionId}/reopen";
};

export type ReopenMissionErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type ReopenMissionError = ReopenMissionErrors[keyof ReopenMissionErrors];

export type ReopenMissionResponses = {
  /**
   * The newly created mission.
   */
  200: Mission;
};

export type ReopenMissionResponse =
  ReopenMissionResponses[keyof ReopenMissionResponses];

export type GetReportFileData = {
  body?: never;
  path: {
    /**
     * The ID of the mission
     */
    missionId: Uuid;
    /**
     * The ID of the file to create.
     */
    fileId: Id;
  };
  query?: {
    noRedirect?: boolean;
  };
  url: "/reports/{missionId}/files/{fileId}";
};

export type GetReportFileErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type GetReportFileError = GetReportFileErrors[keyof GetReportFileErrors];

export type GetReportFileResponses = {
  /**
   * The URL to the file.
   */
  200: FileUrl;
};

export type GetReportFileResponse =
  GetReportFileResponses[keyof GetReportFileResponses];

export type GetUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/user";
};

export type GetUserErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
};

export type GetUserError = GetUserErrors[keyof GetUserErrors];

export type GetUserResponses = {
  /**
   * Successful response
   */
  200: UserInfo;
};

export type GetUserResponse = GetUserResponses[keyof GetUserResponses];

export type GetFirebaseConfigData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/firebase-config";
};

export type GetFirebaseConfigErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
};

export type GetFirebaseConfigError =
  GetFirebaseConfigErrors[keyof GetFirebaseConfigErrors];

export type GetFirebaseConfigResponses = {
  /**
   * Successful response
   */
  200: FirebaseConfig;
};

export type GetFirebaseConfigResponse =
  GetFirebaseConfigResponses[keyof GetFirebaseConfigResponses];

export type FindUsersData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/users";
};

export type FindUsersErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
};

export type FindUsersError = FindUsersErrors[keyof FindUsersErrors];

export type FindUsersResponses = {
  /**
   * Successful response
   */
  200: UsersList;
};

export type FindUsersResponse = FindUsersResponses[keyof FindUsersResponses];

export type DeleteUserData = {
  body?: never;
  path: {
    /**
     * The ID of the user to create
     */
    userId: string;
  };
  query?: never;
  url: "/users/{userId}";
};

export type DeleteUserErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type DeleteUserError = DeleteUserErrors[keyof DeleteUserErrors];

export type DeleteUserResponses = {
  /**
   * Successful response
   */
  204: void;
};

export type DeleteUserResponse = DeleteUserResponses[keyof DeleteUserResponses];

export type CreateUserData = {
  body: CreateUserInput;
  path: {
    /**
     * The ID of the user to create
     */
    userId: string;
  };
  query?: never;
  url: "/users/{userId}";
};

export type CreateUserErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
};

export type CreateUserError = CreateUserErrors[keyof CreateUserErrors];

export type CreateUserResponses = {
  /**
   * Successful response
   */
  200: User;
};

export type CreateUserResponse = CreateUserResponses[keyof CreateUserResponses];

export type GetUserApiKeysData = {
  body?: never;
  path: {
    /**
     * The ID of the user
     */
    userId: string;
  };
  query?: never;
  url: "/users/{userId}/api-keys";
};

export type GetUserApiKeysErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
};

export type GetUserApiKeysError =
  GetUserApiKeysErrors[keyof GetUserApiKeysErrors];

export type GetUserApiKeysResponses = {
  /**
   * Successful response
   */
  200: ApiKeyList;
};

export type GetUserApiKeysResponse =
  GetUserApiKeysResponses[keyof GetUserApiKeysResponses];

export type CreateUserApiKeyData = {
  body: CreateApiKeyInput;
  path: {
    /**
     * The ID of the user to create
     */
    userId: string;
  };
  query?: never;
  url: "/users/{userId}/api-keys";
};

export type CreateUserApiKeyErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type CreateUserApiKeyError =
  CreateUserApiKeyErrors[keyof CreateUserApiKeyErrors];

export type CreateUserApiKeyResponses = {
  /**
   * Successful response
   */
  200: ApiKey;
};

export type CreateUserApiKeyResponse =
  CreateUserApiKeyResponses[keyof CreateUserApiKeyResponses];

export type DeleteUserApiKeyData = {
  body?: never;
  path: {
    /**
     * The ID of the user
     */
    userId: string;
    /**
     * The ID of the API key
     */
    apiKeyId: string;
  };
  query?: never;
  url: "/users/{userId}/api-keys/{apiKeyId}";
};

export type DeleteUserApiKeyErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type DeleteUserApiKeyError =
  DeleteUserApiKeyErrors[keyof DeleteUserApiKeyErrors];

export type DeleteUserApiKeyResponses = {
  /**
   * Successful response
   */
  204: void;
};

export type DeleteUserApiKeyResponse =
  DeleteUserApiKeyResponses[keyof DeleteUserApiKeyResponses];

export type GetPutMissionData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The ID of the mission in your system.
     */
    externalId: string;
    message: string;
    /**
     * An internal ID of the mission in your system.
     */
    internalId?: string;
    /**
     * Comma-separated list of group IDs to add the mission to.
     * If left empty, the mission will be created/updated for all group IDs the API key has access to.
     *
     */
    groupIds?: string;
    keyword?: string;
    editable?: boolean;
    privileges?: boolean;
    address?: string;
    object?: string;
    planNo?: string;
    reporter?: string;
    info?: string;
    commander?: string;
    recorder?: string;
    channel?: string;
    /**
     * Coordinates in the format `lat,lon`
     */
    coordinates?: string;
  };
  url: "/get/put-mission";
};

export type GetPutMissionErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
};

export type GetPutMissionError = GetPutMissionErrors[keyof GetPutMissionErrors];

export type GetPutMissionResponses = {
  /**
   * The mission was successfully created or updated.
   */
  200: Mission;
};

export type GetPutMissionResponse =
  GetPutMissionResponses[keyof GetPutMissionResponses];

export type GetUpdateResourceData = {
  body?: never;
  path?: never;
  query: {
    /**
     * The identifier of the resource.
     */
    identifier: string;
    /**
     * The new status of the resource.
     */
    status?: string;
  };
  url: "/get/update-resource";
};

export type GetUpdateResourceErrors = {
  /**
   * The request was not authorized. Most likely you forgot to send the API key in the header `Authorization`.
   */
  401: _Error;
  /**
   * You are not allowed to perform the requested operation on this resource.
   */
  403: _Error;
  /**
   * The object was not found.
   */
  404: _Error;
};

export type GetUpdateResourceError =
  GetUpdateResourceErrors[keyof GetUpdateResourceErrors];

export type GetUpdateResourceResponses = {
  /**
   * The request was successfully processed.
   */
  202: unknown;
};

export type GetTranslationsData = {
  body?: never;
  path: {
    /**
     * The desired language code
     */
    language: string;
  };
  query?: never;
  url: "/i18n/{language}";
};

export type GetTranslationsResponses = {
  /**
   * The translations
   */
  200: Translations;
};

export type GetTranslationsResponse =
  GetTranslationsResponses[keyof GetTranslationsResponses];

export type ClientOptions = {
  baseUrl:
    | "https://missions-api.rescuetablet.com/"
    | "https://missions-api-dev.rescuetablet.com/"
    | (string & {});
};
